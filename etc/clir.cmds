### Below are some one-liners to gather data from the log output of running CLIR via Ivory (for instructions on running the CLIR system, see etc/README.clir)

grep '<AP>' run-with-grid.log | awk -F":::" '{print $2"\t"$3"\t"$6}' | sort -n -k2 -k1 > ap.$e-$f
grep '<MAP>' run-with-grid.log | awk -F":::" '{print $2"\t"$3}' > map.$e-$f
grep '<TIME>' run.log | awk -F":::" '{print $2"\t"$3"\t"$4}' > time.$e-$f
grep '<Processed>:::10-0-0' run.log | awk -F":::" '{print $3"\t"$4}' | sort -n -k1 > queries.$e-$f.10-0-0

### compare two settings
grep -P '1-100-0-100|1-100-0-90' log/mt.en-fr.ap

### Print out AP values to add into JUnit class
grep '<AP>' run.log | awk --field-separator=":::" '{printf "%s","\""$3"\", \""$6"\",";}END{print "";}'

### AP and stat sig analysis
grep '<AP>' run-with-grid.log | grep '10-100-0-' | awk -F":::" '{print $3"\t"$6}' | sort -n -k1 | awk '{print $2}' > 10-100-0-100.ap 
grep '<AP>' run-with-grid.log | grep '10-0-100-'| awk -F":::" '{print $3"\t"$6}' | sort -n -k1 | awk '{print $2}' > 10-0-100-100.ap
grep '<AP>' run-with-grid.log | grep '10-0-0-' | awk -F":::" '{print $3"\t"$6}' | sort -n -k1 | awk '{print $2}' > 10-0-0-100.ap
grep '<AP>' 1best.log | awk -F":::" '{print $3"\t"$6}' | sort -n -k1 | awk '{print $2}' > 1-100-0-100.ap

### sanity check MAP values for each .ap file
awk '{sum=sum+$1;cnt=cnt+1;}END{print sum/cnt}' 10-0-0-100.ap

### prepare data in format ready for gnuplot (e.g. Fig.2 in COLING2012 paper)
paste 10-0-100-100.ap 1-100-0-100.ap 10-100-0-100.ap 10-0-0-100.ap 10-x-y-100.ap | awk '{print ","$2-$1","$3-$1","$4-$1","$5-$1;}' | sort -t"," -k5 -n -r > clef06.diff.sorted

### prepare data in format ready for gnuplot (e.g. Fig.1 in COLING2012 paper)
grep '<MAP>' test.fr | awk -F":::" '{print $2"-"$3}' > fr.grid-mtn.map
awk -F"_" '{print $2}' ar.grid-mtn.map | awk '{print $1,$2}' | awk -F"-" '{if($2+$3==30){print;}}' > trec02.scfg=0.7.dat

## statistical significance testing
perl etc/stat_sig.pl 10-0-100-100.ap 10-100-0-100.ap 10000
